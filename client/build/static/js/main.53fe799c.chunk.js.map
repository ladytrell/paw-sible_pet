{"version":3,"sources":["utils/actions.js","utils/queries.js","utils/reducers.js","utils/GlobalState.js","utils/helpers.js","components/CategoryMenu/index.js","components/CartReservation/index.js","utils/auth.js","components/Cart/index.js","assets/spinner.gif","components/ProviderList/index.js","pages/Home.js","pages/Detail.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Favorites.js","pages/SingleProvider.js","pages/ReservationHistory.js","App.js","index.js"],"names":["UPDATE_PROVIDERS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","QUERY_CATEGORIES","gql","QUERY_USER","QUERY_ME","QUERY_CHECKOUT","QUERY_PROVIDER","QUERY_PROVIDERS","reducer","state","action","type","providers","categories","currentCategory","cartOpen","cart","provider","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","console","log","useStoreContext","useContext","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","CategoryMenu","useQuery","loading","categoryData","data","useEffect","forEach","category","then","className","map","item","onClick","id","name","CartReservation","src","image","alt","price","placeholder","purchaseQuantity","onChange","target","parseInt","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Cart","loadStripe","useLazyQuery","getCheckout","toggleCart","products","length","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","ProviderList","filter","to","style","fontWeight","availability","day","key","spinner","Home","Detail","useParams","useState","currentProvider","setCurrentProvider","find","indexedProviders","description","itemInCart","cartItem","disabled","p","LOGIN","ADD_USER","ADD_FAVORITE","REMOVE_FAVORITE","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Favorites","userParam","user","me","profile","getProfile","favorites","SingleProvider","providerId","addFavorite","handleAddFavorite","OrderHistory","orders","order","purchaseDate","toLocaleDateString","reservations","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReservationHistory","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAAaA,EAAmB,mBACnBC,EAAoB,oBACpBC,EAA0B,0BAE1BC,EAAc,cACdC,EAAuB,uBACvBC,EAAmB,mBACnBC,EAAuB,uBAEvBC,EAAc,c,wBCQdC,GAfsBC,YAAH,iLAeAA,YAAH,uFAShBC,EAAaD,YAAH,smBAwCVE,EAAWF,YAAH,wjBAwCRG,EAAiBH,YAAH,qIAQdI,EAAiBJ,YAAH,iOAgBdK,EAAkBL,YAAH,wP,gBCpHfM,EAAU,SAACC,EAAOC,GAC3B,OAAQA,EAAOC,MAEb,KAAKlB,EACH,OAAO,2BACFgB,GADL,IAEEG,UAAU,YAAKF,EAAOE,aAG1B,KAAKlB,EACH,OAAO,2BACFe,GADL,IAEEI,WAAW,YAAKH,EAAOG,cAG3B,KAAKlB,EACH,OAAO,2BACFc,GADL,IAEEK,gBAAiBJ,EAAOI,kBAG5B,KAAKlB,EACH,OAAO,2BACFa,GADL,IAEEM,UAAU,EACVC,KAAK,GAAD,mBAAMP,EAAMO,MAAZ,CAAkBN,EAAOO,aAkCjC,KAAKjB,EACH,OAAO,2BACFS,GADL,IAEEM,UAAWN,EAAMM,WAGrB,QACE,OAAON,I,uBC7ETS,EAAeC,0BACbC,EAAaF,EAAbE,SAEFC,EAAgB,SAAC,GAA6B,EAA3BC,MAA4B,ID8EjBC,EC9EIC,EAAY,iBAChD,GD6EgCD,EC7EY,CAC1CX,UAAW,GACXI,KAAM,GACND,UAAU,EACVF,WAAY,GACZC,gBAAiB,IDyEZW,qBAAWjB,EAASe,IC9E3B,mBAAOd,EAAP,KAAciB,EAAd,KASA,OADAC,QAAQC,IAAI,QAAQnB,GACb,cAACW,EAAD,aAAUE,MAAO,CAACb,EAAOiB,IAAeF,KAG7CK,EAAkB,WACpB,OAAOC,qBAAWZ,ICbf,SAASa,EAAWC,EAAWC,EAAQC,GAC5C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAGIC,EAAIC,EAAIC,EAHNC,EAAUC,OAAOC,UAAUC,KAAK,YAAa,GAMnDH,EAAQI,gBAAkB,SAASC,GACjC,IAAMR,EAAKG,EAAQM,OAEnBT,EAAGU,kBAAkB,WAAY,CAAEC,QAAS,QAC5CX,EAAGU,kBAAkB,aAAc,CAAEC,QAAS,QAC9CX,EAAGU,kBAAkB,OAAQ,CAAEC,QAAS,SAI1CR,EAAQS,QAAU,SAASJ,GACzBnB,QAAQC,IAAI,uBAIda,EAAQU,UAAY,SAASL,GAa3B,OAXAR,EAAKG,EAAQM,OAEbR,EAAKD,EAAGc,YAAYpB,EAAW,aAE/BQ,EAAQD,EAAGc,YAAYrB,GAGvBM,EAAGY,QAAU,SAASJ,GACpBnB,QAAQC,IAAI,QAASkB,IAGfb,GACN,IAAK,MACHO,EAAMc,IAAIpB,GACVE,EAAQF,GACR,MACF,IAAK,MACH,IAAMqB,EAAMf,EAAMgB,SAClBD,EAAIJ,UAAY,WACdf,EAAQmB,EAAIR,SAEd,MACF,IAAK,SACHP,EAAMiB,OAAOvB,EAAOwB,KACpB,MACF,QACE/B,QAAQC,IAAI,mBAKhBW,EAAGoB,WAAa,WACdrB,EAAGsB,aCHIC,MArDf,WACE,MAA0BhC,IAA1B,mBAAOpB,EAAP,KAAciB,EAAd,KAEQb,EAAeJ,EAAfI,WAER,EAAwCiD,YAAS7D,GAAzC8D,EAAR,EAAQA,QAAeC,EAAvB,EAAiBC,KA+BjB,OA7BAC,qBAAU,WAEJF,GAEFtC,EAAS,CACPf,KAAMjB,EACNmB,WAAYmD,EAAanD,aAE3BmD,EAAanD,WAAWsD,SAAQ,SAAAC,GAC9BrC,EAAW,aAAc,MAAOqC,OAExBL,GAEVhC,EAAW,aAAc,OAAOsC,MAAK,SAAAxD,GACnCa,EAAS,CACPf,KAAMjB,EACNmB,WAAYA,SAIjB,CAACmD,EAAcD,EAASrC,IAUzB,sBAAK4C,UAAU,WAAf,UACE,oDACCzD,EAAW0D,KAAI,SAACC,GAAD,OACd,wBAEEC,QAAS,WAbG,IAAAC,IAcEF,EAAKd,IAbzBhC,EAAS,CACPf,KAAMhB,EACNmB,gBAAiB4D,KAQf,SAMGF,EAAKG,MALDH,EAAKd,Y,gBCqBLkB,EAhES,SAAC,GAAc,IAAZJ,EAAW,EAAXA,KACzB,EAAqB3C,IAAZH,EAAT,oBA+BA,OACE,sBAAK4C,UAAU,WAAf,UACE,8BACE,qBACEO,IAAG,kBAAaL,EAAKM,OACrBC,IAAI,OAGR,gCACE,gCAAMP,EAAKG,KAAX,MAAoBH,EAAKQ,SACzB,gCACE,wCACA,uBACErE,KAAK,SACLsE,YAAY,IACZ3D,MAAOkD,EAAKU,iBACZC,SArCO,SAACrC,GAChB,IAAMxB,EAAQwB,EAAEsC,OAAO9D,MAET,MAAVA,GACFI,EAAS,CACPf,KAAMb,EACN4D,IAAKc,EAAKd,MAGZ3B,EAAW,OAAQ,SAAT,eAAwByC,MAElC9C,EAAS,CACPf,KAAMZ,EACN2D,IAAKc,EAAKd,IACVwB,iBAAkBG,SAAS/D,KAG7BS,EAAW,OAAQ,MAAT,YAAC,eAAoByC,GAArB,IAA2BU,iBAAkBG,SAAS/D,UAuB5D,sBACEgE,KAAK,MACL,aAAW,QACXb,QAAS,kBAnDI,SAAAD,GACrB9C,EAAS,CACPf,KAAMb,EACN4D,IAAKc,EAAKd,MAEZ3B,EAAW,OAAQ,SAAT,eAAwByC,IA8CXe,CAAef,IAHhC,0C,sCCbK,O,4FAzCb,WACE,OAAOgB,KAAOC,KAAKC,c,sBAGrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAGzC,SAAeA,GACb,IAEE,OADgBH,KAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjCzD,OAAO2D,SAASC,OAAO,O,oBAGzB,WAEEL,aAAaM,WAAW,YAExB7D,OAAO2D,SAASC,OAAO,S,gCC6DZE,IAxFOC,aAAW,oCACpB,WAEX,MAA0B5E,IAA1B,mBAAOpB,EAAP,KAAciB,EAAd,KACA,EAAgCgF,aAAarG,GAA7C,mBAAOsG,EAAP,UAAsB1C,KAatB,SAAS2C,IACPlF,EAAS,CAAEf,KAAMX,IA0BnB,OAtCAkE,qBAAU,WAAM,sDACd,8GACqBnC,EAAW,OAAQ,OADxC,OACQf,EADR,OAEEU,EAAS,CAAEf,KAAMd,EAAsBgH,SAAS,YAAK7F,KAFvD,4CADc,sBAMTP,EAAMO,KAAK8F,QAND,WAAD,wBAOZC,KAED,CAACtG,EAAMO,KAAK8F,OAAQpF,IA6BlBjB,EAAMM,SAWT,sBAAKuD,UAAU,OAAf,UACE,qBAAKA,UAAU,QAAQG,QAASmC,EAAhC,qBACA,+CACCnG,EAAMO,KAAK8F,OACV,gCACGrG,EAAMO,KAAKuD,KAAI,SAAAC,GAAI,OAClB,cAAC,EAAD,CAAgCA,KAAMA,GAAhBA,EAAKd,QAE7B,sBAAKY,UAAU,yBAAf,UACE,8CA3CV,WACE,IAAI0C,EAAM,EAIV,OAHAvG,EAAMO,KAAKmD,SAAQ,SAAAK,GACjBwC,GAAOxC,EAAKQ,MAAQR,EAAKU,oBAEpB8B,EAAIC,QAAQ,GAsCMC,MAEfC,GAAKC,WACH,wBAAQ3C,QAtCtB,WACE,IAAM4C,EAAa,GAEnB5G,EAAMO,KAAKmD,SAAQ,SAACK,GAClB,IAAK,IAAI8C,EAAI,EAAGA,EAAI9C,EAAKU,iBAAkBoC,IACzCD,EAAWE,KAAK/C,EAAKd,QAIzBiD,EAAY,CACVa,UAAW,CAAEX,SAAUQ,MA4Bb,sBAIA,+DAKR,+BACE,sBAAM/B,KAAK,MAAM,aAAW,UAA5B,0BADF,qDA9BF,qBAAKhB,UAAU,cAAcG,QAASmC,EAAtC,SACE,sBACEtB,KAAK,MACL,aAAW,QAFb,8BC5DO,OAA0B,oCCoE1BmC,GA3DM,WAEjB,MAA0B5F,IAA1B,mBAAOpB,EAAP,KAAciB,EAAd,KAEQZ,EAAoBL,EAApBK,gBAER,EAA0BgD,YAASvD,GAA3BwD,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KAoBjB,OAlBAC,qBAAU,WACFD,GACAvC,EAAS,CACLf,KAAMlB,EACNmB,UAAWqD,EAAKrD,cAGzB,CAACqD,EAAMF,EAASrC,IAWdjB,EAAMG,UAAUkG,OAKjB,iCAbKhG,EAIEL,EAAMG,UAAU8G,QAAO,SAAAzG,GAAQ,OAAIA,EAASmD,SAASV,MAAQ5C,KAHzDL,EAAMG,WAcM2D,KAAI,SAACtD,GAAD,OACnB,sBAAwBqD,UAAU,YAAlC,UACI,mBAAGA,UAAU,8BAAb,SACI,cAAC,IAAD,CACIqD,GAAE,oBAAe1G,EAASyC,KAC1BkE,MAAO,CAAEC,WAAY,KACrBvD,UAAU,aAHd,SAKKrD,EAAS0D,SAGlB,sBAAKL,UAAU,0BAAf,UACI,8BAAG,sBAAMA,UAAU,qBAAhB,oBAAH,IAAuDrD,EAAS+D,SAChE,8BAAG,sBAAMV,UAAU,qBAAhB,wBAAuDrD,EAASmD,SAASO,QAC5E,4BAAG,sBAAML,UAAU,qBAAhB,6BACH,6BAAKrD,EAAS6G,aAAavD,KAAI,SAACwD,EAAKC,GACjC,OAAO,6BAAeD,GAANC,aAflB/G,EAASyC,QAoBtBK,EAAU,qBAAKc,IAAKoD,GAASlD,IAAI,YAAe,QA3B9C,sDCpBAmD,GAXF,WAEX,OACE,sBAAK5D,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QCiHS6D,I,eAAAA,GA1Gf,WACE,MAA0BtG,IAA1B,mBAAOpB,EAAP,KAAciB,EAAd,KACQgD,EAAO0D,cAAP1D,GAER,EAA8C2D,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEA,EAA0BzE,YAASvD,GAA3BwD,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KAETrD,EAAoBH,EAApBG,UAAWI,EAASP,EAATO,KAgEnB,OA9DAkD,qBAAU,WAEJtD,EAAUkG,OACZyB,EAAmB3H,EAAU4H,MAAK,SAAAvH,GAAQ,OAAIA,EAASyC,MAAQgB,MAGxDT,GACPvC,EAAS,CACPf,KAAMlB,EACNmB,UAAWqD,EAAKrD,YAGlBqD,EAAKrD,UAAUuD,SAAQ,SAAClD,GACtBc,EAAW,YAAa,MAAOd,OAIzB8C,GACRhC,EAAW,YAAa,OAAOsC,MAAK,SAACoE,GACnC/G,EAAS,CACPf,KAAMlB,EACNmB,UAAW6H,SAIhB,CAAC7H,EAAWqD,EAAMF,EAASrC,EAAUgD,IAsCtC,qCACG4D,EACC,sBAAKhE,UAAU,iBAAf,UACE,cAAC,IAAD,CAAMqD,GAAG,IAAT,sCAEA,6BAAKW,EAAgB3D,OAErB,4BAAI2D,EAAgBI,cAEpB,8BACE,4CADF,IAC2BJ,EAAgBtD,MAAO,IAChD,wBAAQP,QA9CA,WAChB,IAAMkE,EAAa3H,EAAKwH,MAAK,SAACI,GAAD,OAAcA,EAASlF,MAAQgB,KAExDiE,GACFjH,EAAS,CACPf,KAAMZ,EACN2D,IAAKgB,EACLQ,iBAAkBG,SAASsD,EAAWzD,kBAAoB,IAG5DnD,EAAW,OAAQ,MAAT,YAAC,eACN4G,GADK,IAERzD,iBAAkBG,SAASsD,EAAWzD,kBAAoB,OAG5DxD,EAAS,CACPf,KAAMf,EACNqB,SAAS,2BAAMqH,GAAP,IAAwBpD,iBAAkB,MAGpDnD,EAAW,OAAQ,MAAT,YAAC,eAAoBuG,GAArB,IAAsCpD,iBAAkB,OA0B5D,yBACA,wBACE2D,UAAW7H,EAAKwH,MAAK,SAAAM,GAAC,OAAIA,EAAEpF,MAAQ4E,EAAgB5E,OACpDe,QAzBW,WACrB/C,EAAS,CACPf,KAAMb,EACN4D,IAAK4E,EAAgB5E,MAIvB3B,EAAW,OAAQ,SAAT,eAAwBuG,KAgB1B,iCASF,qBACEzD,IAAG,kBAAayD,EAAgBxD,OAChCC,IAAKuD,EAAgB3D,UAGvB,KACHZ,EAAU,qBAAKc,IAAKoD,GAASlD,IAAI,YAAe,KACjD,cAAC,GAAD,Q,kBCrHOgE,GAAQ7I,YAAH,qMA6BL8I,IAlBY9I,YAAH,uSAkBEA,YAAH,qVAqBR+I,GAAe/I,YAAH,gIAQZgJ,GAAkBhJ,YAAH,yHCgBbiJ,OAtEf,SAAe3H,GACb,MAAkC6G,mBAAS,CAAEe,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA2BC,aAAYT,IAAvC,mBAAOU,EAAP,KAAgBC,EAAhB,KAAgBA,MAEVC,EAAgB,iDAAG,WAAOC,GAAP,0FACvBA,EAAMC,iBADiB,kBAGUJ,EAAM,CACnCjC,UAAW,CAAE4B,MAAOE,EAAUF,MAAOC,SAAUC,EAAUD,YAJtC,OAGfS,EAHe,OAMfnE,EAAQmE,EAAiB7F,KAAKwF,MAAM9D,MAC1CwB,GAAKsC,MAAM9D,GAPU,gDASrBhE,QAAQC,IAAR,MATqB,yDAAH,sDAahBmI,EAAe,SAACH,GACpB,MAAwBA,EAAMxE,OAAtBT,EAAR,EAAQA,KAAMrD,EAAd,EAAcA,MACdiI,EAAa,2BACRD,GADO,mBAET3E,EAAOrD,MAIZ,OACE,sBAAKgD,UAAU,iBAAf,UACE,sBAAKA,UAAU,SAAf,UACE,oDACA,+EAEF,sBAAKA,UAAU,QAAf,UACE,cAAC,IAAD,CAAMqD,GAAG,UAAT,iCAEA,uCACA,uBAAMqC,SAAUL,EAAhB,UACE,sBAAKrF,UAAU,8BAAf,UACE,uBAAO2F,QAAQ,QAAf,4BACA,uBACEhF,YAAY,qBACZN,KAAK,QACLhE,KAAK,QACL+D,GAAG,QACHS,SAAU4E,OAGd,sBAAKzF,UAAU,8BAAf,UACE,uBAAO2F,QAAQ,MAAf,uBACA,uBACEhF,YAAY,SACZN,KAAK,WACLhE,KAAK,WACL+D,GAAG,MACHS,SAAU4E,OAGbL,EACC,8BACE,mBAAGpF,UAAU,aAAb,sDAEA,KACJ,qBAAKA,UAAU,oBAAf,SACE,wBAAQ3D,KAAK,SAAb,gCCkBGuJ,OAhFf,SAAgB1I,GACd,MAAkC6G,mBAAS,CAAEe,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkBC,aAAYR,IAAvBmB,EAAP,oBAEMR,EAAgB,iDAAG,WAAOC,GAAP,0FACvBA,EAAMC,iBADiB,SAEQM,EAAQ,CACrC3C,UAAW,CACT4B,MAAOE,EAAUF,MACjBC,SAAUC,EAAUD,SACpBe,UAAWd,EAAUc,UACrBC,SAAUf,EAAUe,YAPD,OAEjBP,EAFiB,OAUjBnE,EAAQmE,EAAiB7F,KAAKkG,QAAQxE,MAC5CwB,GAAKsC,MAAM9D,GAXY,2CAAH,sDAchBoE,EAAe,SAACH,GACpB,MAAwBA,EAAMxE,OAAtBT,EAAR,EAAQA,KAAMrD,EAAd,EAAcA,MACdiI,EAAa,2BACRD,GADO,mBAET3E,EAAOrD,MAIZ,OACE,sBAAKgD,UAAU,wBAAf,UACE,cAAC,IAAD,CAAMqD,GAAG,SAAT,gCAEA,wCACA,uBAAMqC,SAAUL,EAAhB,UACE,sBAAKrF,UAAU,8BAAf,UACE,uBAAO2F,QAAQ,YAAf,yBACA,uBACEhF,YAAY,QACZN,KAAK,YACLhE,KAAK,YACL+D,GAAG,YACHS,SAAU4E,OAGd,sBAAKzF,UAAU,8BAAf,UACE,uBAAO2F,QAAQ,WAAf,wBACA,uBACEhF,YAAY,OACZN,KAAK,WACLhE,KAAK,WACL+D,GAAG,WACHS,SAAU4E,OAGd,sBAAKzF,UAAU,8BAAf,UACE,uBAAO2F,QAAQ,QAAf,oBACA,uBACEhF,YAAY,qBACZN,KAAK,QACLhE,KAAK,QACL+D,GAAG,QACHS,SAAU4E,OAGd,sBAAKzF,UAAU,8BAAf,UACE,uBAAO2F,QAAQ,MAAf,uBACA,uBACEhF,YAAY,SACZN,KAAK,WACLhE,KAAK,WACL+D,GAAG,MACHS,SAAU4E,OAGd,qBAAKzF,UAAU,oBAAf,SACE,wBAAQ3D,KAAK,SAAb,6BCvBK2J,OApDf,WAqCE,OACE,yBAAQhG,UAAU,uBAAlB,UACE,6BACE,cAAC,IAAD,CAAMqD,GAAG,IAAT,sCAKF,8BA1CER,GAAKC,WAEL,qBAAI9C,UAAU,WAAd,UACE,oBAAIA,UAAU,OAAd,SACE,cAAC,IAAD,CAAMqD,GAAG,gBAAT,6BAIF,oBAAIrD,UAAU,OAAd,SAEE,mBAAGiG,KAAK,IAAI9F,QAAS,kBAAM0C,GAAKqD,UAAhC,yBAQJ,qBAAIlG,UAAU,WAAd,UACE,oBAAIA,UAAU,gBAAd,SACE,cAAC,IAAD,CAAMqD,GAAG,UAAT,sBAIF,oBAAIrD,UAAU,gBAAd,SACE,cAAC,IAAD,CAAMqD,GAAG,SAAT,8BC8BG8C,GAtDG,SAACjJ,GACf,IAAYkJ,EAActC,cAAlB1D,GACR,EAAyB8E,aAAYN,IACrC,GADA,oBAC0BpF,YAAS4G,EAAYvK,EAAaC,EAAU,CAClEoH,UAAW,CAAE9D,IAAKgH,MADd3G,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KAIjB,GAAGF,EACC,OAAO,8CAGX,IAAM4G,EAAO1G,EAAK2G,IAAM3G,EAAK0G,MAAQ,GACrChJ,QAAQC,IAAI,OAAQ+I,GAYpB,IAAMvD,EAAWD,GAAKC,WAChByD,EAAU1D,GAAK2D,aAErB,OAAI1D,GAAYyD,EAAQ5G,KAAKP,MAAQgH,EAQhCC,EAAKI,UAKN,gCACA,cAAC,IAAD,CAAMpD,GAAG,IAAT,4BACI,8BACI,+BAAK+C,EAAS,UAAMC,EAAKP,UAAX,MAA2B,OAAzC,kBAEJ,8BACI,cAAC,GAAD,CACIxJ,UAAW+J,EAAKI,iBAXjB,qDAPP,wGCiBGC,GA/CQ,SAACxJ,GACpB,IAAYyJ,EAAe7C,cAAnB1D,GACR/C,QAAQC,IAAI,CAAEqJ,eACd,MAA0BnH,YAASxD,EAAgB,CAC/CkH,UAAW,CAAE9C,GAAIuG,KADblH,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,KAGjB,EAAsBuF,aAAYP,IAA3BiC,EAAP,oBAEMjK,GAAe,OAAJgD,QAAI,IAAJA,OAAA,EAAAA,EAAMhD,WAAY,GAE7BkK,EAAiB,iDAAG,WAAOvB,GAAP,oGAEZsB,EAAY,CACd1D,UAAW,CAAE9C,GAAIuG,KAHH,sDAMlBtJ,QAAQ+H,MAAR,MANkB,wDAAH,sDAUvB,OAAI3F,EACO,6CAIP,gCACI,cAAC,IAAD,CAAM4D,GAAG,IAAT,4BACA,sBAAKrD,UAAU,YAAf,UACI,mBAAGA,UAAU,cAAb,SACI,sBAAMsD,MAAO,CAAEC,WAAY,KAAOvD,UAAU,aAA5C,SACKrD,EAAS0D,SAGlB,sBAAKL,UAAU,YAAf,UACI,4BAAIrD,EAASyH,cACb,wCAAWzH,EAAS+D,SACpB,2CAAc/D,EAASmD,SAASO,QAChC,+CACC1D,EAAS6G,aACV,qBAAKjD,IAAK,mBAAqB5D,EAAS6D,MAAOC,IAAG,UAAK9D,EAAS0D,QAChE,wBAASF,QAAS,kBAAM0G,EAAkBlK,EAASyC,MAAnD,uCCIL0H,OA7Cf,WACE,IACIT,EADI1G,EAASH,YAAS3D,GAAlB8D,KAOR,OAJIA,IACF0G,EAAO1G,EAAK0G,MAIZ,mCACE,sBAAKrG,UAAU,iBAAf,UACE,cAAC,IAAD,CAAMqD,GAAG,IAAT,qCAECgD,EACC,qCACE,0DAC2BA,EAAKP,UADhC,IAC4CO,EAAKN,YAEhDM,EAAKU,OAAO9G,KAAI,SAAC+G,GAAD,OACf,sBAAqBhH,UAAU,OAA/B,UACE,6BACG,IAAIwB,KAAKT,SAASiG,EAAMC,eAAeC,uBAE1C,qBAAKlH,UAAU,WAAf,SACGgH,EAAMG,aAAalH,KAAI,WAA8BmH,GAA9B,IAAGhI,EAAH,EAAGA,IAAKoB,EAAR,EAAQA,MAAOH,EAAf,EAAeA,KAAMK,EAArB,EAAqBA,MAArB,OACtB,sBAAiBV,UAAU,iBAA3B,UACE,eAAC,IAAD,CAAMqD,GAAE,wBAAmBjE,GAA3B,UACE,qBAAKqB,IAAKJ,EAAME,IAAG,kBAAaC,KAChC,4BAAIH,OAEN,8BACE,qCAAQK,SANF0G,UANNJ,EAAM5H,WAoBlB,WCxBNiI,GAAWC,YAAe,CAC9BC,IAAK,aAGDC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BtG,EAAQM,aAAaC,QAAQ,YACnC,MAAO,CACL+F,QAAQ,2BACHA,GADE,IAELC,cAAevG,EAAK,iBAAaA,GAAU,SAK3CwG,GAAS,IAAIC,IAAa,CAC9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,MAgDEC,OA7Cf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBP,OAAQA,GAAxB,SACE,cAAC,IAAD,UACE,8BACE,eAAC,EAAD,WACE,cAAC,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CACEQ,KAAK,IACLC,QAAS,cAAC,GAAD,MAEX,cAAC,IAAD,CACED,KAAK,SACLC,QAAS,cAAC,GAAD,MAEX,cAAC,IAAD,CACED,KAAK,UACLC,QAAS,cAAC,GAAD,MAEX,cAAC,IAAD,CACED,KAAK,gBACLC,QAAS,cAACC,GAAD,MAEX,cAAC,IAAD,CACEF,KAAK,iBACLC,QAAS,cAAC,GAAD,MAEX,cAAC,IAAD,CACED,KAAK,gBACLC,QAAS,cAAC,GAAD,MAEX,cAAC,IAAD,CACED,KAAK,iBACLC,QAAS,cAAC,GAAD,mBCpEzBE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.53fe799c.chunk.js","sourcesContent":["export const UPDATE_PROVIDERS = \"UPDATE_PROVIDERS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n","import { gql } from '@apollo/client';\n\nexport const QUERY_ALL_PROVIDERS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      availability\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  query getUser($_id: ID!){\n    user(_id: $_id) {\n      _id\n      firstName\n      lastName\n      email\n      pets {\n        _id\n        age\n        breed\n      }\n      favorites {\n        _id\n        name\n        description\n        price\n        #quantity\n        image\n        availability\n        category {\n          name\n        }\n      }\n      orders {\n        _id\n        purchaseDate\n        #products {\n         # _id\n         # name\n         # description\n         # price\n         # quantity\n         # image\n        #}\n      }\n    }\n  }\n`;\n\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      firstName\n      lastName\n      email\n      pets {\n        _id\n        age\n        breed\n      }\n      favorites {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n        availability\n        category {\n          name\n        }\n      }\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_PROVIDER = gql`\n  query provider($id: ID!) {\n    provider(_id: $id) {\n      _id\n      name\n      description\n      image\n      price\n      availability\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_PROVIDERS = gql`\n  query providers($name: String) {\n    providers(name: $name) {\n      _id\n      name\n      description\n      image\n      price\n      availability\n      category {\n        _id\n        name\n      }\n    }\n  }\n`;","import { useReducer } from 'react';\n\nimport {\n    UPDATE_PROVIDERS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART  \n  } from \"./actions\";\n  \nexport const reducer = (state, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PROVIDERS`, return a new state object with an updated providers array\n      case UPDATE_PROVIDERS:\n        return {\n          ...state,\n          providers: [...action.providers]\n        };\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n        return {\n          ...state,\n          categories: [...action.categories]\n        };\n\n      case UPDATE_CURRENT_CATEGORY:\n        return {\n          ...state,\n          currentCategory: action.currentCategory\n        }\n      // if action type value is the value of `ADD_TO_CART`, return a new state object with an updated true for cartOpen, cart array  \n      case ADD_TO_CART:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: [...state.cart, action.provider]\n        };\n/*      case ADD_MULTIPLE_TO_CART:\n        return {\n          ...state,\n          cart: [...state.cart, ...action.providers],\n        };\n      case REMOVE_FROM_CART:\n        let newState = state.cart.filter(provider => {\n          return provider._id !== action._id;\n        });\n      \n        return {\n          ...state,\n          cartOpen: newState.length > 0,\n          cart: newState\n      };\n      case UPDATE_CART_QUANTITY:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: state.cart.map(provider => {\n            if (action._id === provider._id) {\n              provider.purchaseQuantity = action.purchaseQuantity;\n            }\n            return provider;\n          })\n      };\n      case CLEAR_CART:\n        return {\n          ...state,\n          cartOpen: false,\n          cart: []\n        };*/\n      case TOGGLE_CART:\n        return {\n          ...state,\n          cartOpen: !state.cartOpen\n        };\n        \n      default:\n        return state;\n    }\n  };\n\n  export function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n    const [state, dispatch] = useProductReducer({\n      providers: [],\n      cart: [],\n      cartOpen: false,   \n      categories: [],\n      currentCategory: '',\n    });\n    // use this to confirm it works!\n    console.log('state',state);\n    return <Provider value={[state, dispatch]} {...props} />;\n};\n  \nconst useStoreContext = () => {\n    return useContext(StoreContext);\n};\n   \nexport { StoreProvider, useStoreContext };","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n      \n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n\n  });\n}\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries'; \nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      //Update InexDB\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div className=\"category\">\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartReservation = ({ item }) => {\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };  \n\n  const onChange = (e) => {\n    const value = e.target.value;\n  \n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n    \n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n    \n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }    \n  };\n  \n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}          \n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartReservation;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport CartReservation from '../CartReservation';\nimport Auth from '../../utils/auth';\nimport './style.css';\nimport { useStoreContext } from '../../utils/GlobalState';\n\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst Cart = () => {\n\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n  \n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n  \n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n  \n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n  \n  function submitCheckout() {\n    const productIds = [];\n  \n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });    \n  }\n\n  \n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartReservation key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n\n  );\n};\n\nexport default Cart;\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PROVIDERS } from '../../utils/actions';\nimport { QUERY_PROVIDERS } from '../../utils/queries';\nimport { useQuery } from '@apollo/client';\nimport spinner from '../../assets/spinner.gif';\n\n//const ProviderList = ({ providers }) => {\nconst ProviderList = () => {\n    // Retrieve current state\n    const [state, dispatch] = useStoreContext();\n\n    const { currentCategory } = state;\n    //Reload the <div> with queried aata\n    const { loading, data } = useQuery(QUERY_PROVIDERS);\n\n    useEffect(() => {\n        if (data) {\n            dispatch({\n                type: UPDATE_PROVIDERS,\n                providers: data.providers\n            });\n        }\n    }, [data, loading, dispatch]);\n\n    function filterProviders() {\n        if (!currentCategory) {\n            return state.providers;\n        }\n\n        return state.providers.filter(provider => provider.category._id === currentCategory);\n    }\n\n    //If no providers are present display message\n    if (!state.providers.length) {\n        return <h3>No Providers Found.</h3>\n    }\n\n    return (\n        <div>\n            {/*Filtier list by category if selected*/}\n            {filterProviders().map((provider) => (\n                <div key={provider._id} className=\"card mb-3\">\n                    <p className=\"card-header provider-header\">\n                        <Link\n                            to={`/provider/${provider._id}`}\n                            style={{ fontWeight: 700 }}\n                            className=\"text-light\"\n                        >\n                            {provider.name}\n                        </Link>\n                    </p>\n                    <div className=\"card-body provider-card\">\n                        <p><span className=\"font-weight-bolder\">Rate: </span>${provider.price}</p>\n                        <p><span className=\"font-weight-bolder\">Category: </span>{provider.category.name}</p>\n                        <p><span className=\"font-weight-bolder\">Availability:</span></p>\n                        <ul>{provider.availability.map((day, key) => {\n                            return <li key={key}>{day}</li>\n                        })}</ul>\n                    </div>\n                </div>\n            ))}\n            {loading ? <img src={spinner} alt=\"loading\" /> : null}\n        </div>\n    );\n};\n\nexport default ProviderList;","import React from \"react\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\nimport ProviderList from \"../components/ProviderList\";\n\nconst Home = () => {\n\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <Cart />\n      <ProviderList />\n    </div>\n  );\n};\n\nexport default Home;\n\n/*\n<ProviderList \n providers={providers}\n />\n */","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { QUERY_PROVIDERS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\n\nimport { idbPromise } from \"../utils/helpers\";\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PROVIDERS,\n} from '../utils/actions';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n  \n  const [currentProvider, setCurrentProvider] = useState({})\n  \n  const { loading, data } = useQuery(QUERY_PROVIDERS);\n  \n  const { providers, cart } = state;\n  \n  useEffect(() => {\n    // already in global store\n    if (providers.length) {\n      setCurrentProvider(providers.find(provider => provider._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PROVIDERS,\n        providers: data.providers\n      });\n  \n      data.providers.forEach((provider) => {\n        idbPromise('providers', 'put', provider);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('providers', 'get').then((indexedProviders) => {\n        dispatch({\n          type: UPDATE_PROVIDERS,\n          providers: indexedProviders\n        });\n      });\n    }\n  }, [providers, data, loading, dispatch, id]);\n    \n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        provider: { ...currentProvider, purchaseQuantity: 1 }\n      });\n      // if provider isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProvider, purchaseQuantity: 1 });\n    }\n  };\n  \n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProvider._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProvider._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProvider });\n  };  \n  \n  return (\n    <>\n      {currentProvider ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Providers</Link>\n\n          <h2>{currentProvider.name}</h2>\n\n          <p>{currentProvider.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProvider.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button \n              disabled={!cart.find(p => p._id === currentProvider._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n\n          </p>\n\n          <img\n            src={`/images/${currentProvider.image}`}\n            alt={currentProvider.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_FAVORITE = gql`\n    mutation addFavorite($id: ID!){\n      addFavorite(id: $id) {\n        _id\n      }\n    }\n  `;\n\nexport const REMOVE_FAVORITE = gql`\n  mutation deleteFavorite($id: ID!) {\n    deleteFavorite(id: $id) {\n      _id\n    }\n  }`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <div className=\"banner\">\n        <h3>PAW-Sible SERVICES</h3>\n        <p>Dog Walkers Who Treat Your Dog Like Family!</p>\n      </div>\n      <div className=\"login\">\n        <Link to=\"/signup\">← Go to Signup</Link>\n\n        <h2>Login</h2>\n        <form onSubmit={handleFormSubmit}>\n          <div className=\"flex-row space-between my-2\">\n            <label htmlFor=\"email\">Email address:</label>\n            <input\n              placeholder=\"youremail@test.com\"\n              name=\"email\"\n              type=\"email\"\n              id=\"email\"\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"flex-row space-between my-2\">\n            <label htmlFor=\"pwd\">Password:</label>\n            <input\n              placeholder=\"******\"\n              name=\"password\"\n              type=\"password\"\n              id=\"pwd\"\n              onChange={handleChange}\n            />\n          </div>\n          {error ? (\n            <div>\n              <p className=\"error-text\">The provided credentials are incorrect</p>\n            </div>\n          ) : null}\n          <div className=\"flex-row flex-end\">\n            <button type=\"submit\">Submit</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1 signup\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1 toplinks\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1 toplinks\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1 header\">\n      <h1>\n        <Link to=\"/\">\n          Paw-sible Pet Services\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link, Navigate, useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_USER, QUERY_ME } from '../utils/queries';\nimport { REMOVE_FAVORITE } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport ProviderList from '../components/ProviderList';\n\nconst Favorites = (props) => {\n    const { id: userParam } = useParams();\n    const [deleteFavorite] = useMutation(REMOVE_FAVORITE);\n    const { loading, data } = useQuery(userParam ? QUERY_USER : QUERY_ME, {\n        variables: { _id: userParam },\n    });\n\n    if(loading) {\n        return <h1>Loading User</h1>\n    }\n\n    const user = data.me || data.user || {};\n    console.log('user', user)\n\n    // const handleDeleteFavorite = async(event) => {\n    //     try {\n    //         await deleteFavorite({\n    //             variables: { id: providerId }\n    //         });\n    //     } catch(e) {\n    //         console.error(e);\n    //     }\n    // };\n\n    const loggedIn = Auth.loggedIn()\n    const profile = Auth.getProfile();\n\n    if(!loggedIn || profile.data._id !== userParam) {\n        return (\n            <h4>\n              You need to be logged in to see this. Use the navigation links above.\n            </h4>\n          );\n    }\n\n    if (!user.favorites) {\n            return <h3>No Favorites Found.</h3>\n        }\n\n    return (\n        <div>\n        <Link to=\"/\">← Go Back</Link>\n            <div>\n                <h2>{userParam ? `${user.firstName}'s` : 'your'} Favorites</h2>\n            </div>\n            <div>\n                <ProviderList\n                    providers={user.favorites}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Favorites;","import React from \"react\";\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { QUERY_PROVIDER } from \"../utils/queries\";\nimport { ADD_FAVORITE } from \"../utils/mutations\";\nimport Auth from '../utils/auth';\n\nconst SingleProvider = (props) => {\n    const { id: providerId } = useParams();\n    console.log({ providerId });\n    const { loading, data } = useQuery(QUERY_PROVIDER, {\n        variables: { id: providerId }\n    });\n    const [addFavorite] = useMutation(ADD_FAVORITE);\n\n    const provider = data?.provider || {};\n\n    const handleAddFavorite = async (event) => {\n        try {\n            await addFavorite({\n                variables: { id: providerId }\n            });\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n\n    return (\n        <div>\n            <Link to=\"/\">← Go Back</Link>\n            <div className=\"card mb-3\">\n                <p className=\"card-header\">\n                    <span style={{ fontWeight: 700 }} className=\"text-light\">\n                        {provider.name}\n                    </span>\n                </p>\n                <div className=\"card-body\">\n                    <p>{provider.description}</p>\n                    <p>Rate: ${provider.price}</p>\n                    <p>Category: {provider.category.name}</p>\n                    <p>Availability: </p>\n                    {provider.availability}\n                    <img src={'/images/profile/' + provider.image} alt={`${provider.name}`} />\n                    < button onClick={() => handleAddFavorite(provider._id)}>Add to favorite</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SingleProvider;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Services</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Reservation History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.reservations.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/reservations/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport Favorites from './pages/Favorites';\nimport SingleProvider from './pages/SingleProvider';\nimport { StoreProvider } from \"./utils/GlobalState\";\nimport ReservationHistory from './pages/ReservationHistory';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Routes>\n              <Route \n                path=\"/\" \n                element={<Home />} \n              />\n              <Route \n                path=\"/login\" \n                element={<Login />}\n              />\n              <Route \n                path=\"/signup\" \n                element={<Signup />} \n              />\n              <Route \n                path=\"/orderHistory\" \n                element={<ReservationHistory />} \n              />\n              <Route \n                path=\"/providers/:id\" \n                element={<Detail />}\n              />\n              <Route \n                path=\"/provider/:id\" \n                element={<SingleProvider />}\n              />\n              <Route \n                path=\"/favorites/:id\" \n                element={<Favorites />}\n              />\n            </Routes>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.register();\n"],"sourceRoot":""}