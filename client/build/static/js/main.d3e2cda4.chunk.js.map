{"version":3,"sources":["utils/actions.js","utils/queries.js","utils/reducers.js","utils/GlobalState.js","utils/helpers.js","components/CategoryMenu/index.js","components/CartReservation/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","assets/spinner.gif","pages/Detail.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/ReservationHistory.js","App.js","serviceWorker.js","index.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","console","log","useStoreContext","useContext","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","CategoryMenu","useQuery","loading","categoryData","data","useEffect","forEach","category","then","item","onClick","id","name","CartReservation","className","src","image","alt","price","placeholder","onChange","target","parseInt","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Cart","loadStripe","useLazyQuery","getCheckout","toggleCart","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProvider","setCurrentProvider","providers","find","indexedProviders","to","description","itemInCart","cartItem","disabled","p","spinner","LOGIN","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","reservations","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReservationHistory","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d3e2cda4.chunk.js","sourcesContent":["export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import { useReducer } from 'react';\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART  \n  } from \"./actions\";\n  \nexport const reducer = (state, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products]\n        };\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n        return {\n          ...state,\n          categories: [...action.categories]\n        };\n\n      case UPDATE_CURRENT_CATEGORY:\n        return {\n          ...state,\n          currentCategory: action.currentCategory\n        }\n      // if action type value is the value of `ADD_TO_CART`, return a new state object with an updated true for cartOpen, cart array  \n      case ADD_TO_CART:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: [...state.cart, action.product]\n        };\n      case ADD_MULTIPLE_TO_CART:\n        return {\n          ...state,\n          cart: [...state.cart, ...action.products],\n        };\n      case REMOVE_FROM_CART:\n        let newState = state.cart.filter(product => {\n          return product._id !== action._id;\n        });\n      \n        return {\n          ...state,\n          cartOpen: newState.length > 0,\n          cart: newState\n      };\n      case UPDATE_CART_QUANTITY:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: state.cart.map(product => {\n            if (action._id === product._id) {\n              product.purchaseQuantity = action.purchaseQuantity;\n            }\n            return product;\n          })\n      };\n      case CLEAR_CART:\n        return {\n          ...state,\n          cartOpen: false,\n          cart: []\n        };\n      case TOGGLE_CART:\n        return {\n          ...state,\n          cartOpen: !state.cartOpen\n        };\n        \n      default:\n        return state;\n    }\n  };\n\n  export function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n    const [state, dispatch] = useProductReducer({\n      products: [],\n      cart: [],\n      cartOpen: false,   \n      categories: [],\n      currentCategory: '',\n    });\n    // use this to confirm it works!\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n};\n  \nconst useStoreContext = () => {\n    return useContext(StoreContext);\n};\n   \nexport { StoreProvider, useStoreContext };","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n      \n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n\n  });\n}\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';import { useStoreContext } from \"../../utils/GlobalState\";\n\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu({}) {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n  \n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });    \n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }  \n  }, [categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n  \n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartReservation = ({ item }) => {\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };  \n\n  const onChange = (e) => {\n    const value = e.target.value;\n  \n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n    \n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n    \n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }    \n  };\n  \n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}          \n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartReservation;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport CartReservation from '../CartReservation';\nimport Auth from '../../utils/auth';\nimport './style.css';\nimport { useStoreContext } from '../../utils/GlobalState';\n\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\nconst Cart = () => {\n\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n  \n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n  \n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n  \n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n  \n  function submitCheckout() {\n    const productIds = [];\n  \n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });    \n  }\n\n  \n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartReservation key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <Cart />\n    </div>\n  );\n};\n\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\n\nimport { idbPromise } from \"../utils/helpers\";\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n  \n  const [currentProvider, setCurrentProvider] = useState({})\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  const { providers, cart } = state;\n  \n  useEffect(() => {\n    // already in global store\n    if (providers.length) {\n      setCurrentProvider(providers.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        providers: data.providers\n      });\n  \n      data.providers.forEach((product) => {\n        idbPromise('providers', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('providers', 'get').then((indexedProviders) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          providers: indexedProviders\n        });\n      });\n    }\n  }, [providers, data, loading, dispatch, id]);\n    \n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProvider, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProvider, purchaseQuantity: 1 });\n    }\n  };\n  \n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProvider._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProvider._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProvider });\n  };  \n  \n  return (\n    <>\n      {currentProvider ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Providers</Link>\n\n          <h2>{currentProvider.name}</h2>\n\n          <p>{currentProvider.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProvider.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button \n              disabled={!cart.find(p => p._id === currentProvider._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n\n          </p>\n\n          <img\n            src={`/images/${currentProvider.image}`}\n            alt={currentProvider.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          Paw-sible Pet Services\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Services</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Reservation History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.reservations.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/reservations/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from \"./utils/GlobalState\";\nimport ReservationHistory from './pages/ReservationHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Routes>\n              <Route \n                path=\"/\" \n                element={<Home />} \n              />\n              <Route \n                path=\"/login\" \n                element={<Login />}\n              />\n              <Route \n                path=\"/signup\" \n                element={<Signup />} \n              />\n              <Route \n                path=\"/orderHistory\" \n                element={<ReservationHistory />} \n              />\n              <Route \n                path=\"/products/:id\" \n                element={<Detail />}\n              />\n            </Routes>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}